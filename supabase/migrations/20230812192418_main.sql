create table public.Category (
    Category_ID bigint PRIMARY KEY UNIQUE generated by default as identity not null,
    Category_Name character varying not null
);


create table public.Department (
    Department_ID bigint PRIMARY KEY UNIQUE generated by default as identity not null,
    Department_Name character varying not null
);


create table public.Location (
    Location_ID bigint PRIMARY KEY UNIQUE generated by default as identity not null,
    Location_Name character varying not null
);


create table public.Priority (
    Priority_ID bigint PRIMARY KEY UNIQUE not null,
    Priorty_Description character varying not null
);


create table public.Role (
    Role_ID bigint PRIMARY KEY UNIQUE generated by default as identity not null,
    Role_Name character varying not null
);


create table public.Status (
    Status_ID bigint PRIMARY KEY UNIQUE  generated by default as identity not null,
    Status_Name character varying not null
);



create table public.User (
    User_ID uuid PRIMARY KEY UNIQUE not null REFERENCES auth.users (id),
    Department_ID bigint null references public.Department (Department_ID),
    Role_ID bigint null references public.Role (Role_ID)
);




create table public.Ticket (
    Ticket_Number bigint PRIMARY KEY UNIQUE  generated by default as identity not null,
    Status_ID bigint not null REFERENCES public.Status (Status_ID),
    Asset_ID bigint,
    Requester_UID uuid REFERENCES auth.users (id),
    Priority_ID bigint not null REFERENCES public.Priority (Priority_ID),
    Title character varying not null,
    Ticket_Description character varying not null,
    Location_ID bigint REFERENCES public.Location (Location_ID),
    Category_ID bigint REFERENCES public.Category (Category_ID),
    Cost decimal,
    Responsable_UID uuid REFERENCES auth.users (id),
    Responsable_Department_ID bigint REFERENCES public.Department(Department_ID),
    Approval_UID uuid REFERENCES auth.users (id)
);


-- this function adapted from https://stackoverflow.com/questions/68334303/supabase-how-to-query-users-by-email

CREATE FUNCTION get_user_id_by_email(email TEXT) RETURNS TABLE (id uuid) SECURITY definer
AS $$
BEGIN
  RETURN QUERY SELECT auth.users.id FROM auth.users WHERE auth.users.email = $1;
END;
$$ LANGUAGE plpgsql;


-- no security for now in favor of ease of development 

-- ALTER TABLE public.Category ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE public.Department ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE public.Location ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE public.Priority ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE public.Role ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE public.Status ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE public.User ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE public.Ticket ENABLE ROW LEVEL SECURITY;
